use std::{fs::File, path::PathBuf};

use clap::Parser;
use hypercube_recursion_machine::{verify_compressed, SP1Proof, SP1ProofWithPublicValues};

#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct Args {
    #[clap(short, long)]
    proof_dir: PathBuf,
}

fn main() {
    let args = Args::parse();

    let path = args.proof_dir;

    let mut file = File::open(path).unwrap();

    let proof: SP1ProofWithPublicValues = bincode::deserialize_from(&mut file).unwrap();

    let proof = proof.proof;
    let proof = match proof {
        SP1Proof::Compressed(proof) => proof,
        _ => panic!("not a compressed proof"),
    };

    let result = verify_compressed(&proof);

    assert!(result.is_ok(), "Failed to verify compressed proof");

    println!(
        r"
 _______  _______  __                        _______  _______  _______  _______           ______   _______             
(  ____ \(  ____ )/  \    |\     /||\     /|(  ____ )(  ____ \(  ____ )(  ____ \|\     /|(  ___ \ (  ____ \            
| (    \/| (    )|\/) )   | )   ( |( \   / )| (    )|| (    \/| (    )|| (    \/| )   ( || (   ) )| (    \/            
| (_____ | (____)|  | |   | (___) | \ (_) / | (____)|| (__    | (____)|| |      | |   | || (__/ / | (__                
(_____  )|  _____)  | |   |  ___  |  \   /  |  _____)|  __)   |     __)| |      | |   | ||  __ (  |  __)               
      ) || (        | |   | (   ) |   ) (   | (      | (      | (\ (   | |      | |   | || (  \ \ | (                  
/\____) || )      __) (_  | )   ( |   | |   | )      | (____/\| ) \ \__| (____/\| (___) || )___) )| (____/\            
\_______)|/       \____/  |/     \|   \_/   |/       (_______/|/   \__/(_______/(_______)|/ \___/ (_______/            
                                                                                                                       
                                                                                                                       
                                                                                                                                         
                       .+------+     +------+     +------+     +------+     +------+.
                     .' |    .'|    /|     /|     |      |     |\     |\    |`.    | `.
                    +---+--+'  |   +-+----+ |     +------+     | +----+-+   |  `+--+---+
                    |   |  |   |   | |    | |     |      |     | |    | |   |   |  |   |
                    |  ,+--+---+   | +----+-+     +------+     +-+----+ |   +---+--+   |
                    |.'    | .'    |/     |/      |      |      \|     \|    `. |   `. |
                    +------+'      +------+       +------+       +------+      `+------+


                    
 _______  _______  _______  _______  _______             _______  _______ _________ _______ _________ _______  ______  
(  ____ )(  ____ )(  ___  )(  ___  )(  ____ \  |\     /|(  ____ \(  ____ )\__   __/(  ____ \\__   __/(  ____ \(  __  \ 
| (    )|| (    )|| (   ) || (   ) || (    \/  | )   ( || (    \/| (    )|   ) (   | (    \/   ) (   | (    \/| (  \  )
| (____)|| (____)|| |   | || |   | || (__      | |   | || (__    | (____)|   | |   | (__       | |   | (__    | |   ) |
|  _____)|     __)| |   | || |   | ||  __)     ( (   ) )|  __)   |     __)   | |   |  __)      | |   |  __)   | |   | |
| (      | (\ (   | |   | || |   | || (         \ \_/ / | (      | (\ (      | |   | (         | |   | (      | |   ) |
| )      | ) \ \__| (___) || (___) || )          \   /  | (____/\| ) \ \_____) (___| )      ___) (___| (____/\| (__/  )
|/       |/   \__/(_______)(_______)|/            \_/   (_______/|/   \__/\_______/|/       \_______/(_______/(______/ "
    );
}
